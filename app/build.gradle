apply plugin: 'com.android.application'
//apply plugin: 'com.android.tools.build:gradle'

def getAvailablePort (){
    def ports = 8080..9000
    def availablePort = 8080
    for (port in ports) {
        try {
            // I was using the following line, does not work.
            // Looks like there's a nuance between connect and bind that I don't know.
//            Socket socket = new Socket("127.0.0.1", port)
            Socket socket = new Socket()
            socket.bind(new InetSocketAddress("127.0.0.1", port))
            socket.close()
            availablePort = port
//            println "HERE IS MY AVAILABLE PORT $port"
            break
        }
        catch(e){
//            println e
        }
    }
    availablePort
}

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        applicationId "com.udacity.gradle.builditbigger"
        minSdkVersion 15
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
        multiDexEnabled true // launch server - run tests - shut server down needs this.
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        resValue "string", "TEST_SERVER_PORT", getAvailablePort().toString()
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //TODO: add a resValue here with the local dev server url??
//            buildConfigField("int", "TEST_SERVER_PORT", getAvailablePort().toString())
        }
    }

    productFlavors {
        free {
            applicationId "com.udacity.gradle.builditbigger.free"
        }
        paid {
            applicationId "com.udacity.gradle.builditbigger.paid"
        }
    }

    // Approach to avoid code duplication in flavors taken from http://stackoverflow.com/questions/28563632/common-code-for-different-android-flavors
    sourceSets {
        // This adds another directory on top of src/flavor/java (and src/main/java)
        free.java.srcDir 'src/common/java'
        paid.java.srcDir 'src/common/java'
//        def lst = free.java.getSrcDirs().asList()
//        println lst
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:appcompat-v7:23.1.1'
    compile project(":joker")
    compile project(":jokedisplayer")
    compile project(path: ':backend', configuration: 'android-endpoints')

    // Added for AdMob
    // We COULD (should) import only the part of the play services we need.
    freeCompile 'com.google.android.gms:play-services:8.4.0'

    androidTestCompile 'junit:junit:4.6'
    androidTestCompile 'com.android.support.test:rules:0.4'
    androidTestCompile 'com.android.support.test:runner:0.4'
//    http://stackoverflow.com/questions/32600204/warningconflict-with-dependency-com-android-supportsupport-annotations
// Force usage of support annotations in the test app, since it is internally used by the runner module.
    androidTestCompile 'com.android.support:support-annotations:23.1.1'
}
