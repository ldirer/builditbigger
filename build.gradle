// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // Just use the latest version. It prevents useless bugs.
        classpath 'com.android.tools.build:gradle:1.5.0'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}
//configurations.all({it -> println it})

allprojects {
    repositories {
        jcenter()
    }
}


def getAvailablePort (){
    def ports = 8080..9000
    def availablePort = 8080
    for (port in ports) {
        try {
            // I was using the following line, does not work.
            // Looks like there's a nuance between connect and bind that I don't know.
//            Socket socket = new Socket("127.0.0.1", port)
            Socket socket = new Socket()
            socket.bind(new InetSocketAddress("127.0.0.1", port))
            socket.close()
            availablePort = port
//            println "HERE IS MY AVAILABLE PORT $port"
            break
        }
        catch(e){
//            println e
        }
    }
    availablePort
}

def availablePort = getAvailablePort()

task myLameDebug << {
    def lst = (List) childProjects.keySet().toList()
    println lst.class
    Properties props = new Properties()
    String propertiesPath = "/home/laurent/AndroidStudioProjects/build_it_bigger/app/gradle.properties"
    File propFile = new File(propertiesPath)
    props.load(propFile.newDataInputStream())
    lst = ["a", "b", "c"]
    lst.collect()
    //.all({it2 -> println it2})
    props.setProperty("myprop", "hop")
    props.store propFile.newWriter(), null
}

task launchBackendAndTest {
    // Some config so that we can run other tasks after appengineRun
    tasks.findByPath(":backend:appengineRun").setProperty("daemon", true)
//    def availablePort = getAvailablePort()
    println "Available port I found: $availablePort"
    tasks.findByPath(":backend:appengineRun").setProperty("httpPort", availablePort)
    dependsOn(["backend:appengineRun", ":app:connectedAndroidTest"])

    // I used that for debug but interestingly it lists only top level tasks.
     //tasks.all({it2 -> println it2.name})

    // Here we can't pass "backend:appengineRun" as a string cuz Groovy goes looking for it into the :app project (which makes sense).
    tasks.findByPath(":app:connectedAndroidTest").shouldRunAfter(tasks.findByPath("backend:appengineRun"))
    finalizedBy ":backend:appengineStop"

    doLast {

    }

    // Found advice similar to that on the internet. Circular reference error, looks terrible practice anyway!
//    tasks.findByPath(":backend:appengineRun").mustRunAfter(":backend:appengineStop")
}

